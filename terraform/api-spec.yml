openapi: 3.0.3

info:
  title: Example API
  description: API defining the operations available in the Example API
  version: 0.1.0
servers:
  - url: 'https://example.com/api/v1'
    description: Production API endpoint for the Example API
paths:
  /hello/{name}:
    get:
      operationId: 'sayHello'
      parameters:
        - name: 'name'
          in: 'path'
          required: true
          schema:
            type: 'string'
      responses:
        '200':
          description: '200 response'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
      x-amazon-apigateway-integration:
        type: 'AWS_PROXY'
        credentials: 'arn:aws:iam::155516267556:role/Developer'
        httpMethod: 'POST'
        uri: 'arn:aws:apigateway:${aws_region}:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:155516267556:function:hello-handler-$${stageVariables.envName}/invocations'
        responses:
          default:
            statusCode: '200'
        passthroughBehavior: 'when_no_match'
        contentHandling: 'CONVERT_TO_TEXT'
    options:
      responses:
        200:
          $ref: '#/components/responses/cors'
        400:
          $ref: '#/components/responses/cors'
        500:
          $ref: '#/components/responses/cors'
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Max-Age: "'7200'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,HEAD,GET,POST,PUT,PATCH,DELETE'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: 'when_no_match'
        timeoutInMillis: 29000
        requestTemplates:
          application/json: '{ "statusCode": 200 }'
        type: 'MOCK'
  /goodbye:
    get:
      operationId: 'sayGoodbye'
      responses:
        '200':
          description: '200 response'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
      x-amazon-apigateway-integration:
        type: 'AWS_PROXY'
        credentials: 'arn:aws:iam::155516267556:role/Developer'
        httpMethod: 'POST'
        uri: 'arn:aws:apigateway:${aws_region}:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:155516267556:function:goodbye-handler-$${stageVariables.envName}/invocations'
        responses:
          default:
            statusCode: '200'
        passthroughBehavior: 'when_no_match'
        contentHandling: 'CONVERT_TO_TEXT'
    options:
      responses:
        200:
          $ref: '#/components/responses/cors'
        400:
          $ref: '#/components/responses/cors'
        500:
          $ref: '#/components/responses/cors'
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Max-Age: "'7200'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,HEAD,GET,POST,PUT,PATCH,DELETE'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: 'when_no_match'
        timeoutInMillis: 29000
        requestTemplates:
          application/json: '{ "statusCode": 200 }'
        type: 'MOCK'
  /games/{gameId}:
    get:
      operationId: 'gameById'
      responses:
        '200':
          description: '200 response'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
      x-amazon-apigateway-integration:
        type: 'AWS_PROXY'
        credentials: 'arn:aws:iam::155516267556:role/Developer'
        httpMethod: 'POST'
        uri: 'arn:aws:apigateway:${aws_region}:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:155516267556:function:gameById-handler-$${stageVariables.envName}/invocations'
        responses:
          default:
            statusCode: '200'
        passthroughBehavior: 'when_no_match'
        contentHandling: 'CONVERT_TO_TEXT'
    options:
      responses:
        200:
          $ref: '#/components/responses/cors'
        400:
          $ref: '#/components/responses/cors'
        500:
          $ref: '#/components/responses/cors'
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Max-Age: "'7200'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,HEAD,GET,POST,PUT,PATCH,DELETE'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: 'when_no_match'
        timeoutInMillis: 29000
        requestTemplates:
          application/json: '{ "statusCode": 200 }'
        type: 'MOCK'
components:
  schemas:
    Message:
      type: object
      properties:
        message:
          type: string
  responses:
    404NotFound:
      description: The specified resource was not found.
      headers:
        Access-Control-Allow-Origin:
          schema:
            type: 'string'
        Access-Control-Allow-Methods:
          schema:
            type: 'string'
        Access-Control-Max-Age:
          schema:
            type: 'string'
        Access-Control-Allow-Headers:
          schema:
            type: 'string'
      content:
        application/json:
          schema:
            type: object
            properties:
              statusCode:
                type: string
                example: '404'
              message:
                type: string
                example: The specified resource was not found
    500APIError:
      description: Unexpected error
      headers:
        Access-Control-Allow-Origin:
          schema:
            type: 'string'
        Access-Control-Allow-Methods:
          schema:
            type: 'string'
        Access-Control-Max-Age:
          schema:
            type: 'string'
        Access-Control-Allow-Headers:
          schema:
            type: 'string'
      content:
        application/json:
          schema:
            type: object
            properties:
              statusCode:
                type: string
                example: '500'
              message:
                type: string
                example: This is an error
    lambda:
      description: Lambda
      headers:
        Access-Control-Allow-Origin:
          schema:
            type: 'string'
        Access-Control-Allow-Methods:
          schema:
            type: 'string'
        Access-Control-Max-Age:
          schema:
            type: 'string'
        Access-Control-Allow-Headers:
          schema:
            type: 'string'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Lambda'
    cors:
      description: '200 response'
      headers:
        Access-Control-Allow-Origin:
          schema:
            type: 'string'
        Access-Control-Allow-Methods:
          schema:
            type: 'string'
        Access-Control-Max-Age:
          schema:
            type: 'string'
        Access-Control-Allow-Headers:
          schema:
            type: 'string'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Empty'
